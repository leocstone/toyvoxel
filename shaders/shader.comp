#version 450
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require

const int CHUNK_WIDTH_METERS = 16;
const int CHUNK_HEIGHT_METERS = 16;
const int VOXELS_PER_METER = 16;
const int CHUNK_WIDTH_VOXELS = CHUNK_WIDTH_METERS * VOXELS_PER_METER;
const int CHUNK_HEIGHT_VOXELS = CHUNK_HEIGHT_METERS * VOXELS_PER_METER;
/* Chunking */
/* To parameterize - make these constants added at compile time from main program */
const int DRAW_DISTANCE = 1;
const int LOADED_CHUNKS_AXIS = DRAW_DISTANCE * 2 + 1;
const int MAX_INDEX_X = CHUNK_WIDTH_VOXELS * LOADED_CHUNKS_AXIS;
const int MAX_INDEX_Y = CHUNK_WIDTH_VOXELS * LOADED_CHUNKS_AXIS;

struct VoxelChunk {
    int8_t voxels[CHUNK_WIDTH_VOXELS][CHUNK_WIDTH_VOXELS][CHUNK_HEIGHT_VOXELS];
};

/* Maps chunk index -> buffer offset */
/*
Ex:
Chunks are:
 (0,2) (1,2) (2,2)
 (0,1) (1,1) (2,1)
 (0,0) (1,0) (2,0)
This map shows offsets into VoxelChunks, in chunks:
 (1,2) (0,0) (1,1)
 (2,1) (1,0) (0,1) -> VoxelChunks.voxels
 (0,2) (2,0) (2,2)
*/
/*
struct ChunkMap {
    ivec2 lowestChunkIndex;
    int chunkOffsets[LOADED_CHUNKS_AXIS][LOADED_CHUNKS_AXIS];
    VoxelChunk chunks[LOADED_CHUNKS_AXIS * LOADED_CHUNKS_AXIS];
};
*/

layout(push_constant) uniform PushConstants {
    vec3 position;
    vec3 forward;
    vec3 up;
    vec3 right;
    float time;
    vec3 sunDirection;
} pushConstants;

layout(binding = 0, rgba8) uniform writeonly image2D outputImage;

layout(std430, binding = 1) readonly buffer VoxelChunksIn {
    int8_t voxels[MAX_INDEX_X][MAX_INDEX_Y][CHUNK_HEIGHT_VOXELS];
};

/* Rendering */
const int SAMPLES = 1;
const int MAX_STEPS = 10000;
const int MAX_BOUNCES = 10;
const float MAX_DIST = 10000.0;
const float MAX_INDIRECT_DIST = 2.0;

vec3 skyboxColorInDirection(vec3 direction) {
    return vec3(0.0);
}

/* Copied from stackoverflow - random number in [0.0, 1.0] */
float random(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

/*
Wrapper around array to prevent invalid access
*/
int8_t getVoxel(ivec3 voxel) {
    if (voxel.x < 0 || voxel.y < 0 || voxel.z < 0) {
        return int8_t(-128);
    }
    if (voxel.x >= MAX_INDEX_X || voxel.y >= MAX_INDEX_Y || voxel.z >= CHUNK_HEIGHT_VOXELS) {
        return int8_t(-128);
    }
    return voxels[voxel.x][voxel.y][voxel.z];
}

const float eps = 0.1;

/*
If dist < 0, no intersection
*/
struct VoxelIntersection {
    float dist;
    vec3 normal;
    int8_t id;
    ivec3 idx;
    vec3 accumulatedColor;
};

/*
Main voxel intersection function
*/
VoxelIntersection distanceToVoxelAlongRay(vec3 origin, vec3 direction, float maxlen) {
    vec3 accumulatedColor = vec3(0.0);
    const vec3 rayAxesDirections = sign(direction);
    vec3 curPos = origin;
    curPos *= VOXELS_PER_METER;
    float totalDist = 0.0;
    int i = 0;
    /* Skip to world bounds */
    /*
    vec3 axisDistancesToWorldBounds = vec3(0.0, 0.0, 0.0);
    if (curPos.x < 0.0 && direction.x > 0.0) {
        axisDistancesToWorldBounds.x = abs(curPos.x) / direction.x;
    } else if (curPos.x > CHUNK_WIDTH_VOXELS && direction.x < 0.0) {
        axisDistancesToWorldBounds.x = (curPos.x - CHUNK_WIDTH_VOXELS) / direction.x;
    }
    if (curPos.y < 0.0 && direction.y > 0.0) {
        axisDistancesToWorldBounds.y = abs(curPos.y) / direction.y;
    } else if (curPos.y > CHUNK_WIDTH_VOXELS && direction.y < 0.0) {
        axisDistancesToWorldBounds.y = (curPos.y - CHUNK_WIDTH_VOXELS) / direction.y;
    }
    if (curPos.z < 0.0 && direction.z > 0.0) {
        axisDistancesToWorldBounds.z = abs(curPos.z) / direction.z;
    } else if (curPos.z > CHUNK_HEIGHT_VOXELS && direction.z < 0.0) {
        axisDistancesToWorldBounds.z = (curPos.z - CHUNK_HEIGHT_VOXELS) / direction.z;
    }
    curPos += (max(axisDistancesToWorldBounds.x, max(axisDistancesToWorldBounds.y, axisDistancesToWorldBounds.z)) * 0.975) * direction;
    */
    for (; i < MAX_STEPS && totalDist < maxlen; i++) {
        /* Exiting world bounds check */
        /*
        if (curPos.x > MAX_INDEX_X + 1.0 && direction.x >= 0.0)
            return VoxelIntersection(-1.0, vec3(0.0), int8_t(0), ivec3(-1, -1, -1));
        if (curPos.x < -1.0 && direction.x <= 0.0)
            return VoxelIntersection(-1.0, vec3(0.0), int8_t(0), ivec3(-1, -1, -1));
        if (curPos.y > MAX_INDEX_Y + 1.0 && direction.y >= 0.0)
            return VoxelIntersection(-1.0, vec3(0.0), int8_t(0), ivec3(-1, -1, -1));
        if (curPos.y < -1.0 && direction.y <= 0.0)
            return VoxelIntersection(-1.0, vec3(0.0), int8_t(0), ivec3(-1, -1, -1));
        if (curPos.z > CHUNK_HEIGHT_VOXELS + 1.0 && direction.z >= 0.0)
            return VoxelIntersection(-1.0, vec3(0.0), int8_t(0), ivec3(-1, -1, -1));
        if (curPos.z < -1.0 && direction.z <= 0.0)
            return VoxelIntersection(-1.0, vec3(0.0), int8_t(0), ivec3(-1, -1, -1));
        */
        // For each axis, coordinate of the next plane we will reach
        vec3 nextPlaneCoords = vec3(0.0);
        // next plane in positive and negative directions
        nextPlaneCoords.x = rayAxesDirections.x >= 0.0 ? floor(curPos.x + 0.999999999) : ceil(curPos.x - 0.999999999);
        nextPlaneCoords.y = rayAxesDirections.y >= 0.0 ? floor(curPos.y + 0.999999999) : ceil(curPos.y - 0.999999999);
        nextPlaneCoords.z = rayAxesDirections.z >= 0.0 ? floor(curPos.z + 0.999999999) : ceil(curPos.z - 0.999999999);
        // For each axis, the distance along direction to the next plane we will reach
        // (any zeros in direction are handled here - they should become INF)
        vec3 nextPlaneDistances = abs((nextPlaneCoords - curPos) / direction);
        // Find the minimum of these, so we just travel far enough to get to the next plane intersection (we don't want to skip any voxels!)
        float minPlaneDistance = min(nextPlaneDistances.x, 
                                     min(nextPlaneDistances.y, nextPlaneDistances.z));
        // Travel that minimum distance to the next plane
        float distanceTraveled = minPlaneDistance;
        totalDist += distanceTraveled;
        curPos += distanceTraveled * direction;
        ivec3 curVoxel = ivec3(0, 0, 0);
        vec3 normal = vec3(0, 0, 0);
        if (nextPlaneDistances.x == minPlaneDistance) {
            // Set current voxel
            curVoxel.x = int(direction.x < 0.0 ? floor(curPos.x - eps) : round(curPos.x));
            curVoxel.y = int(floor(curPos.y));
            curVoxel.z = int(floor(curPos.z));
            // Set normal
            normal.x = -rayAxesDirections.x;
        } else if (nextPlaneDistances.y == minPlaneDistance) {
            // Set current voxel
            curVoxel.x = int(floor(curPos.x));
            curVoxel.y = int(direction.y < 0.0 ? floor(curPos.y - eps) : round(curPos.y));
            curVoxel.z = int(floor(curPos.z));
            // Set normal
            normal.y = -rayAxesDirections.y;
        } else {
            // Set current voxel
            curVoxel.x = int(floor(curPos.x));
            curVoxel.y = int(floor(curPos.y));
            curVoxel.z = int(direction.z < 0.0 ? floor(curPos.z - eps) : round(curPos.z));
            // Set normal
            normal.z = -rayAxesDirections.z;
        }
        // We should now be intersecting a plane - is there a voxel face at that intersection?
        int8_t v = getVoxel(curVoxel);
        if (v == -128) {
            return VoxelIntersection(-1.0, vec3(0.0), int8_t(0), ivec3(-1), accumulatedColor);
        }
        /*
        Value is the distance to closest voxel from any point in the voxel,
        rounded down - if at least 2, we can skip some iterations
        */
        if (v > 1) {
            curPos += float(v - 1) * direction;
            totalDist += float(v - 1);
        }
        /* Value is voxel id */
        else if (v < 0) {
            // Transparent voxel
            if (v == -6) {
                accumulatedColor = vec3(0.1);
            } else {
                return VoxelIntersection(totalDist / VOXELS_PER_METER, normal, -v, curVoxel, accumulatedColor);
            }
        }
    }
    return VoxelIntersection(-1.0, vec3(0.0), int8_t(0), ivec3(-1), accumulatedColor);
}

const float shadowOffset = 0.0001;

/*
Flat directional lighting
*/
float cheapDirectLightingAtPoint(vec3 point, vec3 normal, vec3 sunDir) {
    return normal.x / 2.0 + 1.0;
}

/*
Computes the intensity of lighting coming directly from the sun at a given point with given normal
*/
float directLightingAtPoint(vec3 point, vec3 normal, vec3 sunDir) {
    point += normal * shadowOffset;
    if (distanceToVoxelAlongRay(point, -sunDir, MAX_DIST).dist >= 0.0) {
        return 0.0;
    }
    return 0.3;// * clamp(dot(-sunDir, normal), 0.0, 1.0);
}

/*
Computes the intensity of lighting reflecting off of other surfaces at a given point with given normal
*/
float indirectLightingAtPoint(vec3 point, vec3 normal, vec3 sunDir) {
    //return 1.0;
    for (int bounce = 0; bounce < MAX_BOUNCES; bounce++) {
        // Offset the normal by a small amount
        const float diffuse = 1.0;
        vec3 dirMask = vec3(normal.x != 0 ? 0.0 : diffuse,
                            normal.y != 0 ? 0.0 : diffuse,
                            normal.z != 0 ? 0.0 : diffuse);
        vec3 randomOffset = vec3(random(vec2(point.z + point.x, point.y - point.x)) - 0.5,
                                 random(vec2(point.x - point.z, point.z + point.y)) - 0.5,
                                 random(vec2(point.y + point.z, point.x - point.y)) - 0.5) * dirMask;
        vec3 curDirection = normalize(normal + randomOffset);
        VoxelIntersection curBounce = distanceToVoxelAlongRay(point, curDirection, MAX_INDIRECT_DIST);
        if (curBounce.dist >= 0.0) {
            point += curBounce.dist * curDirection;
            normal = curBounce.normal;
        } else {
            return 1.0 / float(bounce + 2);   
        }
    }
    return 0.0;
}

/*
Voxel color lookup table
*/
vec3 voxelColor(int8_t idx) {
    int idx_int = int(idx);
    switch(idx_int) {
    case 1: // Stone
        return vec3(50.0, 54.0, 38.0) / 255.0;
    case 2: // Dirt
        return vec3(188.0, 108.0, 37.0) / 255.0;
    case 3: // Grass
        return vec3(96.0, 108.0, 56.0) / 255.0;
    case 4: // Bark
        return vec3(122.0, 119.0, 110.0) / 255.0;
    case 5: // Wood
        return vec3(224, 201, 137) / 255.0;
    case 6:
        return vec3(0.9);
    default:
        return vec3(1.0, 0.0, 0.0);
    }
}

/*
Color variance strength lookup
*/
float voxelColorVariance(int8_t idx) {
    int idx_int = int(idx);
    switch(idx_int) {
    case 1: // Stone
        return 0.01;
    case 2: // Dirt
        return 0.05;
    case 3: // Grass
        return 0.1;
    case 4: // Bark
        return 0.1;
    case 5: // Wood
        return 0.1;
    case 6: // Glass
        return 0.01;
    default:
        return 0.01;
    }
}

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main() {
    /* Avoid OOB operations */
    ivec2 sz = imageSize(outputImage);
    if (gl_GlobalInvocationID.x > sz.x || gl_GlobalInvocationID.y > sz.y) {
        return;
    }

    const vec2 pixel = vec2(gl_GlobalInvocationID.xy);
    const vec2 pixelDimensions = vec2(sz);
    
    const float focalLength = 1.0;
    const float lensX = 1.0;
    const float lensY = (pixelDimensions.y / pixelDimensions.x) * lensX;
    const float pixelSize = lensX / pixelDimensions.x;
    
    const vec3 rayOrigin = pushConstants.position;
    vec3 rayDirection = pushConstants.position + pushConstants.forward * focalLength;
    // Cast ray through "lens" at corresponding pixel point
    rayDirection += pushConstants.up * (lensY / 2.0);
    rayDirection -= pushConstants.right * (lensX / 2.0);
    rayDirection += (pixel.x / pixelDimensions.x) * pushConstants.right * lensX;
    rayDirection -= (pixel.y / pixelDimensions.y) * pushConstants.up * lensY;
    
    vec3 outputColor = vec3(0.0);
    for (int i = 0; i < SAMPLES; i++) {
        vec3 randomOffset = pushConstants.right * random(vec2(pixel.x + i, pixel.y)) - pushConstants.up * random(vec2(pixel.x, pixel.y + i));
        vec3 curSampleDirection = rayDirection + randomOffset * pixelSize;
        curSampleDirection = normalize(curSampleDirection - pushConstants.position);
        VoxelIntersection curSample = distanceToVoxelAlongRay(rayOrigin, curSampleDirection, MAX_DIST);
        outputColor += curSample.dist > 0.0 ? (curSample.accumulatedColor + voxelColor(curSample.id)) * (1.0 + (random(vec2(curSample.idx.x + curSample.idx.z * curSample.idx.x, curSample.idx.y + curSample.idx.z * curSample.idx.y)) - 0.5) * voxelColorVariance(curSample.id))
                                           * (directLightingAtPoint(pushConstants.position + curSampleDirection * curSample.dist, curSample.normal, pushConstants.sunDirection) * 0.5
                                             + indirectLightingAtPoint(pushConstants.position + curSampleDirection * curSample.dist, curSample.normal, pushConstants.sunDirection) * 0.5) : skyboxColorInDirection(curSampleDirection) + curSample.accumulatedColor;
    }
    outputColor /= float(SAMPLES);
    //outputColor = vec3(pow(outputColor.x, 0.45), pow(outputColor.y, 0.45), pow(outputColor.z, 0.45));
    
    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(outputColor + 0.0 * vec3(random(vec2(gl_GlobalInvocationID.x / 1920.0 + pushConstants.time, gl_GlobalInvocationID.y / 1080.0 + pushConstants.time))), 1.0));
}
