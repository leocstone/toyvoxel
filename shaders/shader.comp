#version 450

const int CHUNK_SIZE_METERS = 16;
const int CHUNK_HEIGHT_METERS = 256;
const int VOXELS_PER_METER = 8;
const int CHUNK_SIZE_VOXELS = CHUNK_SIZE_METERS * VOXELS_PER_METER;
const int CHUNK_HEIGHT_VOXELS = CHUNK_HEIGHT_METERS * VOXELS_PER_METER;

struct VoxelChunk {
    int voxels[CHUNK_SIZE_VOXELS][CHUNK_SIZE_VOXELS][CHUNK_HEIGHT_VOXELS];
};

layout(binding = 0) uniform Camera {
    vec3 position;
    vec3 forward;
    vec3 up;
    vec3 right;
    float time;
} camera;

layout(binding = 1, rgba8) uniform writeonly image2D outputImage;

layout(std430, binding = 2) readonly buffer VoxelChunkIn {
    VoxelChunk chunkIn;
};

const int SAMPLES = 1;
const int MAX_STEPS = CHUNK_SIZE_VOXELS;
const int MAX_BOUNCES = 1;
const float MAX_DIST = 10000.0;

vec3 skyboxColorInDirection(vec3 direction) {
    return vec3(0.42, 0.69, 0.92);
}

/* Copied from stackoverflow - random number in [0.0, 1.0] */
float random(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

/*
1 if there is a voxel, 0 otherwise
*/
bool voxelVolume(ivec3 voxel) {
    if (voxel.z > 58)
        return false;
    if (voxel.x >= 10 && voxel.x <= 20)
        return true;
    if (voxel.y >= 10 && voxel.y <= 20)
        return true;
    if (voxel.z > 50)
        return false;
    return (voxel.x + voxel.y + voxel.z) % 2 == 0;
}

/*
Wrapper around array to prevent invalid access
*/
bool getVoxel(ivec3 voxel) {
    if (voxel.x < 0 || voxel.y < 0 || voxel.z < 0)
        return false;
    if (voxel.x > CHUNK_SIZE_VOXELS || voxel.y > CHUNK_SIZE_VOXELS || voxel.z > CHUNK_HEIGHT_VOXELS)
        return false;
    return chunkIn.voxels[voxel.x][voxel.y][voxel.z] != 0;
}

const float eps = 0.1;

/*
xyz: normal at intersection
w:   distance to intersection
*/
vec4 distanceToVoxelAlongRay(vec3 origin, vec3 direction, float maxlen) {
    const vec3 rayAxesDirections = sign(direction);
    vec3 curPos = origin;
    curPos *= VOXELS_PER_METER;
    float totalDist = 0.0;
    int i = 0;
    for (; i < MAX_STEPS && totalDist < maxlen; i++) {
        // For each axis, coordinate of the next plane we will reach
        vec3 nextPlaneCoords = vec3(0.0);
        nextPlaneCoords.x = rayAxesDirections.x >= 0.0 ? floor(curPos.x + 0.999999999) : ceil(curPos.x - 0.999999999);
        nextPlaneCoords.y = rayAxesDirections.y >= 0.0 ? floor(curPos.y + 0.999999999) : ceil(curPos.y - 0.999999999);
        nextPlaneCoords.z = rayAxesDirections.z >= 0.0 ? floor(curPos.z + 0.999999999) : ceil(curPos.z - 0.999999999);
        // For each axis, the distance along direction to the next plane we will reach
        // (any zeros in direction are handled here - they should become INF)
        vec3 nextPlaneDistances = abs((nextPlaneCoords - curPos) / direction);
        // Find the minimum of these, so we just travel far enough to get to the next plane intersection (we don't want to skip any voxels!)
        float minPlaneDistance = min(nextPlaneDistances.x, 
                                     min(nextPlaneDistances.y, nextPlaneDistances.z));
        // Travel that minimum distance to the next plane
        float distanceTraveled = minPlaneDistance;
        totalDist += distanceTraveled;
        curPos += distanceTraveled * direction;
        ivec3 curVoxel = ivec3(0, 0, 0);
        vec3 normal = vec3(0, 0, 0);
        if (nextPlaneDistances.x == minPlaneDistance) {
            // Set current voxel
            curVoxel.x = int(direction.x < 0.0 ? floor(curPos.x - eps) : round(curPos.x));
            curVoxel.y = int(floor(curPos.y));
            curVoxel.z = int(floor(curPos.z));
            // Set normal
            normal.x = -rayAxesDirections.x;
        } else if (nextPlaneDistances.y == minPlaneDistance) {
            // Set current voxel
            curVoxel.x = int(floor(curPos.x));
            curVoxel.y = int(direction.y < 0.0 ? floor(curPos.y - eps) : round(curPos.y));
            curVoxel.z = int(floor(curPos.z));
            // Set normal
            normal.y = -rayAxesDirections.y;
        } else {
            // Set current voxel
            curVoxel.x = int(floor(curPos.x));
            curVoxel.y = int(floor(curPos.y));
            curVoxel.z = int(direction.z < 0.0 ? floor(curPos.z - eps) : round(curPos.z));
            // Set normal
            normal.z = -rayAxesDirections.z;
        }
        // We should now be intersecting a plane - is there a voxel face at that intersection?
        if (getVoxel(curVoxel)) {
            return vec4(normal, totalDist /= VOXELS_PER_METER);
        }
    }
    return vec4(vec3(0.0), -1.0);
}

const float shadowOffset = 0.00001;
/*
Computes the intensity of lighting coming directly from the sun at a given point with given normal
*/
float directLightingAtPoint(vec3 point, vec3 normal, vec3 sunDir) {
    point += normal * shadowOffset;
    if (distanceToVoxelAlongRay(point, -sunDir, MAX_DIST).w >= 0.0) {
        return 0.0;
    }
    return 1.0;// * clamp(dot(-sunDir, normal), 0.0, 1.0);
}

/*
Computes the intensity of lighting reflecting off of other surfaces at a given point with given normal
*/
float indirectLightingAtPoint(vec3 point, vec3 normal, vec3 sunDir) {
    for (int bounce = 0; bounce < MAX_BOUNCES; bounce++) {
        // Offset the normal by a small amount
        const float diffuse = 0.4;
        vec3 dirMask = vec3(normal.x != 0 ? 0.0 : diffuse, normal.y != 0 ? 0.0 : diffuse, normal.z != 0 ? 0.0 : diffuse);
        vec3 randomOffset = vec3(random(vec2(point.z + bounce, point.y + bounce)), 
                                 random(vec2(point.x + bounce, point.z + bounce)), 
                                 random(vec2(point.y + bounce, point.x + bounce))) * dirMask;
        vec3 curDirection = normalize(normal + randomOffset);
        vec4 curBounce = distanceToVoxelAlongRay(point, curDirection, MAX_DIST);
        if (curBounce.w >= 0.0) {
            point += curBounce.w * curDirection;
            normal = curBounce.xyz;
        } else {
            return 1.0 / float(bounce + 2);   
        }
    }
    return 0.0;
}

/*
Less ugly colors for axis-aligned normals
*/
vec3 prettierNormalColor(vec3 normal) {
    if (normal.x > 0) {
        return vec3(249, 65, 68) / 255.0;
    } else if (normal.x < 0) {
        return vec3(243, 114, 44) / 255.0;
    }
    if (normal.y > 0) {
        return vec3(144, 190, 109) / 255.0;
    } else if (normal.y < 0) {
        return vec3(67, 170, 139) / 255.0;
    }
    if (normal.z > 0) {
        return vec3(87, 117, 144) / 255.0;
    } else if (normal.z < 0) {
        return vec3(39, 125, 161) / 255.0;
    }
    return vec3(1.0, 0.0, 0.0);
}

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

void main() {
    /* Avoid OOB operations */
    ivec2 sz = imageSize(outputImage);
    if (gl_GlobalInvocationID.x > sz.x || gl_GlobalInvocationID.y > sz.y) {
        return;
    }
    
    vec3 sunDirection = normalize(vec3(0.1 * sin(camera.time) + 1, 0.1 * cos(camera.time) + 1, 0.1 * sin(camera.time) - 1));

    const vec2 pixel = vec2(gl_GlobalInvocationID.xy);
    const vec2 pixelDimensions = vec2(sz);
    
    const float focalLength = 1.0;
    const float lensX = 1.0;
    const float lensY = (pixelDimensions.y / pixelDimensions.x) * lensX;
    const float pixelSize = lensX / pixelDimensions.x;
    
    const vec3 rayOrigin = camera.position;
    vec3 rayDirection = camera.position + camera.forward * focalLength;
    // Cast ray through "lens" at corresponding pixel point
    rayDirection += camera.up * (lensY / 2.0);
    rayDirection -= camera.right * (lensX / 2.0);
    rayDirection += (pixel.x / pixelDimensions.x) * camera.right * lensX;
    rayDirection -= (pixel.y / pixelDimensions.y) * camera.up * lensY;
    
    vec3 outputColor = vec3(0.0);
    for (int i = 0; i < SAMPLES; i++) {
        vec3 randomOffset = camera.right * random(vec2(pixel.x + i + camera.time, pixel.y + camera.time)) - camera.up * random(vec2(pixel.x + camera.time, pixel.y + i + camera.time));
        vec3 curSampleDirection = rayDirection + randomOffset * pixelSize;
        curSampleDirection = normalize(curSampleDirection - camera.position);
        vec4 curSample = distanceToVoxelAlongRay(rayOrigin, curSampleDirection, MAX_DIST);
        outputColor += curSample.w > 0.0 ? prettierNormalColor(curSample.xyz) 
                                            * (directLightingAtPoint(camera.position + curSampleDirection * curSample.w, curSample.xyz, sunDirection) * 0.5
                                             + indirectLightingAtPoint(camera.position + curSampleDirection * curSample.w, curSample.xyz, sunDirection) * 0.5) : vec3(1.0);
    }
    outputColor /= float(SAMPLES);
    //outputColor = vec3(pow(outputColor.x, 0.45), pow(outputColor.y, 0.45), pow(outputColor.z, 0.45));
    
    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(outputColor.xyz, 1.0));
}
