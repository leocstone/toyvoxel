#version 450
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require

const int CHUNK_WIDTH_METERS = 16;
const int CHUNK_HEIGHT_METERS = 32;
const int VOXELS_PER_METER = 16;
const int CHUNK_WIDTH_VOXELS = CHUNK_WIDTH_METERS * VOXELS_PER_METER;
const int CHUNK_HEIGHT_VOXELS = CHUNK_HEIGHT_METERS * VOXELS_PER_METER;
/* Chunking */
/* To parameterize - make these constants added at compile time from main program */
const int DRAW_DISTANCE = 1;
const int LOADED_CHUNKS_AXIS = DRAW_DISTANCE * 2 + 1;
const int MAX_INDEX_X = CHUNK_WIDTH_VOXELS * LOADED_CHUNKS_AXIS;
const int MAX_INDEX_Y = CHUNK_WIDTH_VOXELS * LOADED_CHUNKS_AXIS;

layout(std430, binding = 0, row_major) buffer VoxelChunkIn {
    int8_t voxels[MAX_INDEX_X][MAX_INDEX_Y][CHUNK_HEIGHT_VOXELS];
};

int flatIndex(ivec3 coord) {
    return coord.x + coord.y * CHUNK_WIDTH_VOXELS + coord.z * CHUNK_WIDTH_VOXELS * CHUNK_WIDTH_VOXELS;
}

int8_t getVoxel(ivec3 coord) {
    if ((coord.x < 0) ||
        (coord.x >= MAX_INDEX_X) ||
        (coord.y < 0) ||
        (coord.y >= MAX_INDEX_Y) ||
        (coord.z < 0) ||
        (coord.z >= CHUNK_HEIGHT_VOXELS)) {
        return int8_t(0);
    }
    return voxels[coord.x][coord.y][coord.z];
}

void setVoxel(ivec3 coord, int v) {
    if ((coord.x < 0) ||
        (coord.x >= MAX_INDEX_X) ||
        (coord.y < 0) ||
        (coord.y >= MAX_INDEX_Y) ||
        (coord.z < 0) ||
        (coord.z >= CHUNK_HEIGHT_VOXELS)) {
        return;
    }
    voxels[coord.x][coord.y][coord.z] = int8_t(v);
}

const int max_search_radius = 9;
int8_t distanceToClosestVoxel(ivec3 voxel) {
    float minDist = 9999.0;
    for (int x = max(0, voxel.x - max_search_radius); x < voxel.x + max_search_radius && x < MAX_INDEX_X; x++) {
        for (int y = max(0, voxel.y - max_search_radius); y < voxel.y + max_search_radius && y < MAX_INDEX_Y; y++) {
            for (int z = max(0, voxel.z - max_search_radius); z < voxel.z + max_search_radius && z < CHUNK_HEIGHT_VOXELS; z++) {
                if (voxels[x][y][z] < 0 && !(voxel == ivec3(x, y, z))) {
                    float curDist = length(vec3(x, y, z) - vec3(voxel));
                    if (curDist < minDist) {
                        minDist = curDist;
                    }
                }
            }
        }
    }
    return minDist > 127.0 ? int8_t(0) : int8_t(floor(minDist));
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 16) in;

void main() {
    ivec3 curIndex = ivec3(gl_GlobalInvocationID);// + pushConstants.voxelOffset;
    if (getVoxel(curIndex) == 0) {
        setVoxel(curIndex, distanceToClosestVoxel(curIndex));
    }
}
